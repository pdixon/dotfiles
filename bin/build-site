#!/usr/bin/env luajit

require 'luarocks.loader'
local lunamark = require 'lunamark'
local alt_getopt = require 'alt_getopt'
local cosmo = require 'cosmo'
local lpeg = require 'lpeg'
local lfs = require 'lfs'

local version = [[
build-site 0.1-dev
Copyright (C) 2012 Phillip Dixon
]]

local usage = [[
Usage: build-site [options] - build a static site from a tree of Markdown files.

Options:
  --output,-o DIR       The output directory
  --templates,-t DIR    The templates directory
  --version,-V          Version information
  --help,-h             This message
]]

local long_opts = {
   output = 'o',
   templates = 't',
   version = 'V',
   help = 'h'
}

local short_opts = 't:o:Vh'

local optarg,optind = alt_getopt.get_opts(arg, short_opts, long_opts)

if optarg.h then
   io.write(usage)
   os.exit(0)
end

if optarg.V then
   io.write(version)
   os.exit(0)
end

local options = {
   template_dir = optarg.t or "templates/",
   output_dir = optarg.o or "site/"
}

-- setup the metadata handling
function create_metadata_parser()
   local P, S, C, Cg, Cf, Cc = lpeg.P, lpeg.S, lpeg.C, lpeg.Cg, lpeg.Cf, lpeg.Cc
   local nl = P'\n'
   local fence = P'---' * nl

   local key = C((P(1)-S('\t\n :'))^1)
   local value = C((P(1)-nl)^1)
   local pair = Cg(key * P': ' * value) * nl
   local list = Cf(Cc({}) * pair^0, rawset)
   local header = fence * list * fence

   local rest = C(P(1)^0)
   local doc = header * rest

   return function (str) return doc:match(str) end
end

-- setup the markdown handling
function create_markdown_parser()
   local writer = lunamark.writer.html.new()

   function writer.verbatim_class(s, class)
    return {'<pre><code class="'..class..'"">', writer.string(s), "</code></pre>"}
  end
   
   local function expandtabs(s)
      if s:find("\t") then
         return s:gsub("[^\n]*",expand_tabs_in_line)
      else
         return s
      end
   end

   local function add_fenced(syntax)
      local P, S, Cs, C = lpeg.P, lpeg.S, lpeg.Cs, lpeg.C

      local newline = P("\n")
      local linechar = P(1-newline)
      local line = C(linechar^0 * newline)
      local blank_line = P("\t ")^0 * newline / "\n"
      local blank_lines = blank_line^0
      local fence = P("~")^3
      local properties = P("{") * P(1-P("}"))^1 * P("}")

      local fenced_code = Cs(((fence * properties^-1 * newline)/"") *
                             (line - fence)^1 *
                             ((fence * newline)/"")
                            ) / expandtabs / writer.verbatim
      syntax.Block = fenced_code + syntax.Block
      return syntax
   end

   return lunamark.reader.markdown.new(writer, { smart = true,
                                                 notes = true,
                                                 definition_lists = true,
                                                 alter_syntax=add_fenced
                                               })
end

local header_parser = create_metadata_parser()
local body_parser = create_markdown_parser()


function string:split(pat)
  local st, g = 1, self:gmatch("()("..pat..")")
  local function getter(self, segs, seps, sep, cap1, ...)
    st = sep and seps + #sep
    return self:sub(segs, (seps or 0) - 1), cap1 or sep, ...
  end
  local function splitter(self)
    if st then return getter(self, st, g()) end
  end
  return splitter, self
end

-- return the dir part of a path.
-- i.e dirname("./posts/blah/foobar.markdown") -> "post/blah"
function dirname(path)
   return path:match("(.*)/")
end

function basename(path)
   return path:match(".*/(.*)")
end

function strip_ext(path)
   return path:match("(.*)%.")
end

function build_path(...)
  return table.concat({...}, "/")
end

function lfs.mkdir_p(path)
   print("mkdir: "..path)
  local current
  for dir in string.split(path, "/") do
    if not current then
      current = dir
    else
      current = build_path(current, dir)
    end
    lfs.mkdir(current)
  end
end

-- read the posts
function get_posts(path)
   local posts = {}
   for file in lfs.dir(path) do
      if string.find(file, '(.)markdown$') then
         local filepath = path .. "/" .. file
         local header, rest = header_parser(assert(io.open(filepath):read('*a')))
         local post = {
            name = filepath,
            modified = lfs.attributes(filepath).modification,
            header = header,
            body = body_parser(rest)
         }
         table.insert(posts, post)
      end
   end
   return posts
end

-- write the posts
function generate_pages(options, posts)
   local template = assert(io.open(options["template_dir"].."post.html"):read('*a'))
   for _, post in ipairs(posts) do
      local dir = options["output_dir"]..dirname(post["name"])
      local base = strip_ext(basename(post["name"]))
      local rendered = cosmo.fill(template, post)
      lfs.mkdir_p(dir)
      local out = assert(io.open(dir.."/"..base..".html","w+"))
      out:write(rendered)
      out:close()
   end
end

-- generate the feed
function generate_feed(options, posts)
end

-- generate the homepage
function generate_homepage(options, posts)
end

-- generate the archive
function generate_archive(options, posts)
end

function copy_media()
   os.execute("cp -r media "..options['output_dir'])
end

print"Reading files..."
posts = get_posts("posts")
print(string.format("Read %d posts", #posts))
print"Building Site..."
generate_pages(options, posts)
generate_homepage(options, posts)
generate_archive(options, posts)
generate_feed(options, posts)
copy_media()
print"Done."
