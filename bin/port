#!/usr/bin/env python
#
#
# Base on port.py. Orignal copyright message follows.
# Copyright 2011-2012 Avery Pennarun and port.py contributors.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#    1. Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in
#       the documentation and/or other materials provided with the
#       distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import argparse
import array
import errno
import fcntl
import os
import select
import sys
import termios
import tty

def log(s, *args):
    if args:
        ss = s % args
    else:
        ss = s
    sys.stdout.flush()
    sys.stderr.write(ss.replace('\n', '\r\n'))
    sys.stderr.flush()

class ModemError(Exception):
    pass

def _speedv(speed):
    try:
        return termios.__dict__['B%s' % int(speed)]
    except KeyError:
        raise ModemError('invalid port speed: %r (try 115200, 57600, etc)'
                         % speed)

class Modem(object):
    def __init__(self, filename, speed):
        self.fd = self.tc_orig = None
        if '/' not in filename and os.path.exists('/dev/%s' % filename):
            filename = '/dev/%s' % filename
        self.fd = os.open(filename, os.O_RDWR | os.O_NONBLOCK)
        fcntl.fcntl(self.fd, fcntl.F_SETFL,
                    fcntl.fcntl(self.fd, fcntl.F_GETFL) & ~os.O_NONBLOCK)
        self.tc_orig = tc = termios.tcgetattr(self.fd)
        tc[4] = tc[5] = _speedv(speed)
        tc[2] &= ~(termios.PARENB | termios.PARODD)
        tc[2] |= termios.CLOCAL
        termios.tcsetattr(self.fd, termios.TCSADRAIN, tc)
        tty.setraw(self.fd)

    def __del__(self):
        self.close()

    def close(self):
        if self.fd is not None:
            try:
                termios.tcsetattr(self.fd, termios.TCSADRAIN, self.tc_orig)
            except:
                pass
            os.close(self.fd)

    def flags(self):
        bits = [(i, getattr(termios,i))
                for i in dir(termios)
                if i.startswith('TIOCM_')]
        tbuf = array.array('i', [0])
        fcntl.ioctl(self.fd, termios.TIOCMGET, tbuf, True)
        out = []
        for name, bit in sorted(bits):
            if tbuf[0] & bit:
                out.append(name[6:])
        return ', '.join(out)

    def sendbreak(self):
        termios.tcsendbreak(self.fd, 0)


def main():
    parser = argparse.ArgumentParser(description="A minimal serial port interface")
    parser.add_argument('tty')
    parser.add_argument('-s', '--speed', type=int, default=115200, help='the baud rate')
    parser.add_argument('-l', '--limit', type=int, help='maximum upload rate')
    args = parser.parse_args()

    if args.limit and args.limit < 300:
        log('--limit should be at least 300 bps\n')
        exit(1)
    if args.limit > max(115200, args.speed):
        log('--limit should be no more than --speed\n')
        exit(1)

    tc_stdin_orig = termios.tcgetattr(0)
    modem = Modem(args.tty, args.speed)

    line = ''
    MAGIC = ['~.', '!.']

    try:
        tty.setraw(0)

        mflags = None
        last_out = 0
        if args.limit:
            secs_per_byte = 1.0 / (float(args.limit) / 10)
            assert(secs_per_byte < 0.1)
        log('(Type ~. or !. to exit, or ~b to send BREAK)')

        while 1:
            newflags = modem.flags()
            if newflags != mflags:
                mflags = newflags
                log('\n(Line Status: %s)\n', mflags)

            r,w,x = select.select([0,modem.fd], [], [])
            if 0 in r:
                buf = os.read(0, 1)
                if buf in '\r\n\x03':
                    line = ''
                else:
                    line += buf
                if line in MAGIC:
                    break
                if line == '~b':
                    log('(BREAK)')
                    modem.sendbreak()
                    line = ''
                elif len(buf):
                    os.write(modem.fd, buf)
                    if opt.limit:
                        time.sleep(secs_per_byte)
            if modem.fd in r:
                buf = os.read(modem.fd, 4096)
                if len(buf):
                    os.write(1, buf)
                if buf == '\0':
                    log('\n(received NUL byte)\n')
    finally:
        termios.tcsetattr(0, termios.TCSANOW, tc_stdin_orig)


if __name__ == '__main__':
    main()
